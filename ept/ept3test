<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Squat Tracker</title>

    <!-- external styles -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
    />
    <link rel="stylesheet" href="../css/ept.css" />
    <link rel="stylesheet" href="../css/main.css" />

    <style>
      /* Clean dashboard layout */
      .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 1rem;
        background: rgba(0, 0, 0, 0.7);
        color: white;
        position: relative;
        z-index: 100;
      }
      
      .header-controls {
        display: flex;
        align-items: center;
        gap: 1rem;
      }
      
      .camera-select {
        background: rgba(0, 0, 0, 0.6);
        color: #ffffff;
        border: 1px solid #444;
        border-radius: 6px;
        padding: 0.5rem;
        max-width: 260px;
      }

      .star-display {
        font-weight: bold;
        font-size: 1.1rem;
        background: rgba(0, 0, 0, 0.5);
        padding: 0.5rem 1rem;
        border-radius: 20px;
      }

      @media (max-width: 600px) {
        .dashboard-header {
          flex-direction: column;
          gap: 0.5rem;
          padding: 0.5rem;
        }
        
        .header-controls {
          width: 100%;
          justify-content: space-between;
        }
        
        .camera-select {
          max-width: 160px;
          font-size: 0.8rem;
          padding: 0.3rem;
        }
        
        .star-display {
          font-size: 0.9rem;
          padding: 0.3rem 0.8rem;
        }
      }
    </style>
  </head>

  <body>
    <!-- ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ DASHBOARD HEADER ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ -->
    <div class="dashboard-header">
      <a class="back-button" href="/dashboard.html">
        <i class="fas fa-arrow-left"></i> Dashboard
      </a>
      
      <div class="header-controls">
        <div class="star-display">üåü Stars: <span id="starBalance">0</span></div>
        <select id="cameraSelect" class="camera-select"></select>
      </div>
    </div>

    <!-- ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MAIN AREA ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ -->
    <div class="main-container">
      <div class="video-wrapper">
        <video id="video" autoplay muted playsinline></video>
        <canvas id="canvas"></canvas>

        <div class="hud top-left" id="angleDisplay">Angle: --¬∞</div>
        <div class="hud top-right" id="counterDisplay">Squats: 0</div>

        <div class="status-indicator" id="statusIndicator"></div>
        <div id="feedback"></div>

        <div id="qualityIndicator" class="quality-indicator quality-good">
          Perfect Form ‚úÖ
        </div>
      </div>

      <!-- controls -->
      <div class="controls">
        <button id="startBtn">
          <i class="fas fa-play"></i> Start Tracking
        </button>
        <button id="resetBtn"><i class="fas fa-redo"></i> Reset Count</button>
        <button id="calibrateBtn"><i class="fas fa-cog"></i> Calibrate</button>
        <button onclick="location.href='eptsel.html'">
          Return to Selection Screen
        </button>
        <div class="timer">‚è±Ô∏è Time: <span id="sessionTime">0</span>s</div>
      </div>

      <!-- stat boxes -->
      <div class="squat-stats">
        <div class="stat-box">
          <div class="stat-label">Squat Count</div>
          <div class="stat-value" id="squatCount">0</div>
        </div>
        <div class="stat-box">
          <div class="stat-label">Current State</div>
          <div class="stat-value" id="state">ready</div>
        </div>
        <div class="stat-box">
          <div class="stat-label">Knee Angle</div>
          <div class="stat-value" id="kneeAngle">--¬∞</div>
        </div>
        <div class="stat-box">
          <div class="stat-label">Threshold</div>
          <div class="stat-value" id="threshold">--¬∞</div>
        </div>
      </div>
    </div>

    <!-- win screen -->
    <div id="winScreen" style="display: none">
      <div class="win-content">
        <h1 class="win-title">Workout Complete!</h1>
        <div class="time-display">Time: <span id="finalTime">00:00</span></div>
        <div class="best-time-display">
          Best Time: <span id="bestTime">--:--</span>
          <span class="record-badge" style="display: none">New Record!</span>
        </div>
        <div id="starsContainer" style="margin: 1rem 0"></div>
        <div class="win-buttons">
          <button class="play-again-btn" onclick="playAgain()">
            <i class="fas fa-redo"></i> Play Again
          </button>
          <button class="next-btn" onclick="nextLevel()">
            Next <i class="fas fa-arrow-right"></i>
          </button>
        </div>
      </div>
    </div>

    <!-- Mediapipe -->
    <script
      src="https://cdn.jsdelivr.net/npm/@mediapipe/pose/pose.js"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/@mediapipe/drawing_utils/drawing_utils.js"
      crossorigin="anonymous"
    ></script>

    <!-- ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CORE SCRIPT ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ -->
    <script>
      /* ----------- Constants for leg-only drawing ----------- */
      const LEG_CONNECTIONS = [
        [23, 25],
        [25, 27],
        [27, 29],
        [29, 31], // left
        [24, 26],
        [26, 28],
        [28, 30],
        [30, 32], // right
      ];
      const LEG_LANDMARKS = [23, 24, 25, 26, 27, 28, 29, 30, 31, 32];

      /* ----------- Local-storage helpers ----------- */
      const USER_KEY = "nf_loggedInUser";
      const USERS_KEY = "nf_users";
      const CAM_KEY = "nf_selectedCamera";

      const readDB = () => JSON.parse(localStorage.getItem(USERS_KEY) || "{}");
      const writeDB = (db) =>
        localStorage.setItem(USERS_KEY, JSON.stringify(db));
      const currentUser = () => localStorage.getItem(USER_KEY);

      /* ======================================================
         CLASS : AdvancedSquatTracker
      ====================================================== */
      class AdvancedSquatTracker {
        constructor() {
          /* ----------- configuration from eptsel.html ----------- */
          const cfg = JSON.parse(localStorage.getItem("exerciseMode") || "{}");

          /* reps & angle thresholds come from cfg */
          this.targetReps = cfg.reps || 10;
          this.downT =
            cfg.threshold !== undefined && !isNaN(cfg.threshold)
              ? cfg.threshold
              : 90; // default 90¬∞
          this.upT = this.downT + 30; // simple buffer for standing back up

          /* ----------- DOM handles ----------- */
          this.video = document.getElementById("video");
          this.canvas = document.getElementById("canvas");
          this.ctx = this.canvas.getContext("2d");

          /* ----------- initial state ----------- */
          this.squatCount = 0;
          this.isTracking = false;
          this.squatPos = "up";
          this.lastValidSquat = 0;
          this.historySize = 8;
          this.kneeHistory = [];
          this.minDur = 300;
          this.maxDur = 8000;
          this.smoothing = 0.55;

          /* show chosen threshold in HUD */
          document.getElementById("threshold").textContent = this.downT + "¬∞";

          /* ----------- Mediapipe Pose ----------- */
          this.pose = new Pose({
            locateFile: (f) =>
              `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${f}`,
          });
          this.pose.setOptions({
            modelComplexity: 2,
            smoothLandmarks: true,
            minDetectionConfidence: 0.7,
            minTrackingConfidence: 0.7,
          });
          this.pose.onResults((r) => this.onResults(r));

          /* ----------- UI / Camera / Stars ----------- */
          this.bindEvents();
          this.startSession();
          this.loadStars();
          this.setupCamera();
        }

        /* ---------------- Star helpers ---------------- */
        loadStars() {
          const u = currentUser();
          const db = readDB();
          document.getElementById("starBalance").textContent =
            u && db[u] ? db[u].stars || 0 : 0;
        }

        addStars(n = 1) {
          const u = currentUser();
          if (!u) return;
          const db = readDB();
          if (!db[u]) db[u] = { stars: 0 };
          db[u].stars = (db[u].stars || 0) + n;
          writeDB(db);
          document.getElementById("starBalance").textContent = db[u].stars;
        }

        /* ---------------- Camera picker ---------------- */
        async setupCamera() {
          const sel = document.getElementById("cameraSelect");
          const devs = await navigator.mediaDevices.enumerateDevices();
          const cams = devs.filter((d) => d.kind === "videoinput");
          sel.innerHTML = "";
          cams.forEach((d, i) => {
            const o = document.createElement("option");
            o.value = d.deviceId;
            o.textContent = d.label || `Camera ${i + 1}`;
            sel.appendChild(o);
          });
          const saved = localStorage.getItem(CAM_KEY) || cams[0]?.deviceId;
          sel.value = saved;
          sel.onchange = (e) => {
            localStorage.setItem(CAM_KEY, e.target.value);
            this.openStream(e.target.value);
          };
          this.openStream(saved);
        }

        async openStream(id) {
          if (this.stream) this.stream.getTracks().forEach((t) => t.stop());
          try {
            this.stream = await navigator.mediaDevices.getUserMedia({
              video: {
                deviceId: { exact: id },
                width: { ideal: 640 },
                height: { ideal: 480 },
              },
              audio: false,
            });
            this.video.srcObject = this.stream;
            await this.video.play();
            if (!this.raf) this.poseLoop();
          } catch (e) {
            alert("Camera error: " + e.message);
            console.error(e);
          }
        }

        poseLoop() {
          const step = async () => {
            if (this.isTracking && this.video.readyState >= 2) {
              await this.pose.send({ image: this.video });
            }
            this.raf = requestAnimationFrame(step);
          };
          step();
        }

        /* ---------------- UI events ---------------- */
        bindEvents() {
          document.getElementById("startBtn").onclick = () => this.toggle();
          document.getElementById("resetBtn").onclick = () => this.reset();
          document.getElementById("calibrateBtn").onclick = () =>
            alert("Stand 3 s then squat 3 s ‚Äì simple calibration.");
          window.addEventListener("storage", () => this.loadStars());
          document.addEventListener("visibilitychange", () => {
            if (!document.hidden) this.loadStars();
          });
        }

        /* ---------------- Timer ---------------- */
        startSession() {
          this.start = Date.now();
          this.timer = setInterval(() => {
            document.getElementById("sessionTime").textContent = Math.floor(
              (Date.now() - this.start) / 1000
            );
          }, 1000);
        }

        /* ---------------- Tracking controls ---------------- */
        toggle() {
          this.isTracking = !this.isTracking;
          const btn = document.getElementById("startBtn");
          btn.innerHTML = this.isTracking
            ? "‚è∏Ô∏è Stop Tracking"
            : '<i class="fas fa-play"></i> Start Tracking';
          btn.style.background = this.isTracking
            ? "linear-gradient(45deg, #f44336, #ff9800)"
            : "linear-gradient(45deg, #ff6b6b, #ffa500)";
        }

        reset() {
          this.squatCount = 0;
          this.squatPos = "up";
          this.kneeHistory = [];
          this.updateHUD();
        }

        /* ---------------- Pose results ---------------- */
        onResults(res) {
          this.draw(res);
          if (res.poseLandmarks && this.isTracking) {
            const a = this.analyse(res.poseLandmarks);
            this.stateMachine(a);
            this.updateHUD(a);
          }
        }

        /* ---------------- Geometry ---------------- */
        ang(a, b, c) {
          const ab = [a.x - b.x, a.y - b.y];
          const cb = [c.x - b.x, c.y - b.y];
          const dot = ab[0] * cb[0] + ab[1] * cb[1];
          return (
            (Math.acos(
              Math.min(
                Math.max(dot / (Math.hypot(...ab) * Math.hypot(...cb)), -1),
                1
              )
            ) *
              180) /
            Math.PI
          );
        }

        smooth(v, arr) {
          arr.push(v);
          if (arr.length > this.historySize) arr.shift();
          let wSum = 0;
          let wTot = 0;
          arr.forEach((x, i) => {
            const w = Math.pow(this.smoothing, arr.length - 1 - i);
            wSum += x * w;
            wTot += w;
          });
          return wSum / wTot;
        }

        analyse(lm) {
          const H = lm[24];
          const K = lm[26];
          const A = lm[28];
          const knee = this.smooth(this.ang(H, K, A), this.kneeHistory);

          /* 90-degree guide */
          const thigh = [H.x - K.x, H.y - K.y];
          const len = Math.hypot(...thigh);
          const rot = [thigh[1] / len, -thigh[0] / len];
          this.guide = {
            k: { x: K.x, y: K.y },
            a: { x: K.x + rot[0] * len, y: K.y + rot[1] * len },
          };

          return {
            angle: knee,
            conf: Math.min(
              H.visibility || 0,
              K.visibility || 0,
              A.visibility || 0
            ),
          };
        }

        /* ---------------- Finite-state machine ---------------- */
        stateMachine(a) {
          if (a.conf < 0.4) {
            this.quality("poor");
            return;
          }

          if (this.squatPos === "up" && a.angle < this.downT) {
            this.squatPos = "down";
            this.downTime = Date.now();
          } else if (this.squatPos === "down" && a.angle > this.upT) {
            if (Date.now() - this.downTime >= this.minDur) {
              this.squatPos = "up";
              this.rep();
            } else {
              this.squatPos = "up";
            }
          }

          this.quality(a.angle < this.downT ? "good" : "warning");
        }

        rep() {
          this.squatCount += 1;
          this.addStars();
          this.flash("Perfect squat! üéâ");

          if (this.squatCount >= this.targetReps) {
            this.finish();
          }
        }

        /* ---------------- Finish session ---------------- */
        finish() {
          clearInterval(this.timer);
          const total = Date.now() - this.start;

          document.getElementById("finalTime").textContent = this.fmt(total);

          const best = parseInt(
            localStorage.getItem("bestSquatTime") || 1e9,
            10
          );
          if (total < best) {
            localStorage.setItem("bestSquatTime", total);
            document.querySelector(".record-badge").style.display = "inline";
          }
          document.getElementById("bestTime").textContent = this.fmt(
            Math.min(best, total)
          );

          /* star icons */
          const box = document.getElementById("starsContainer");
          box.innerHTML = "";
          for (let i = 0; i < this.squatCount; i += 1) {
            const s = document.createElement("span");
            s.textContent = "üåü";
            s.style.fontSize = "2rem";
            box.appendChild(s);
          }

          /* history save */
          try {
            const h = JSON.parse(
              localStorage.getItem("therapySessions") || "[]"
            );
            h.push({
              date: new Date().toISOString(),
              mode: "normal",
              game: "Squat Tracker",
              duration: Math.round(total / 1000),
            });
            localStorage.setItem("therapySessions", JSON.stringify(h));
          } catch (e) {
            console.warn("history save failed", e);
          }

          document.getElementById("winScreen").style.display = "flex";
          this.isTracking = false;
          document.getElementById("startBtn").innerHTML =
            '<i class="fas fa-play"></i> Start Tracking';
        }

        fmt(ms) {
          const s = Math.floor(ms / 1000);
          const m = Math.floor(s / 60);
          return `${String(m).padStart(2, "0")}:${String(s % 60).padStart(
            2,
            "0"
          )}`;
        }

        /* ---------------- Visual helpers ---------------- */
        quality(q) {
          const el = document.getElementById("qualityIndicator");
          el.textContent =
            q === "good"
              ? "Perfect Form ‚úÖ"
              : q === "warning"
              ? "Check Form ‚ö†Ô∏è"
              : "Poor Detection ‚ùå";
          el.className = `quality-indicator quality-${q}`;
        }

        flash(msg) {
          const f = document.getElementById("feedback");
          f.textContent = msg;
          f.style.display = "block";
          setTimeout(() => {
            f.style.display = "none";
          }, 2000);
        }

        /* ---------------- Drawing ---------------- */
        draw(res) {
          const c = this.canvas;
          const ctx = this.ctx;
          c.width = this.video.videoWidth || 640;
          c.height = this.video.videoHeight || 480;
          ctx.clearRect(0, 0, c.width, c.height);

          /* mirror feed */
          ctx.save();
          ctx.scale(-1, 1);
          ctx.drawImage(this.video, -c.width, 0, c.width, c.height);
          ctx.restore();

          if (res.poseLandmarks) {
            this.drawSkeleton(res.poseLandmarks);
          }
        }

        drawSkeleton(lm) {
          const c = this.canvas;
          const ctx = this.ctx;
          ctx.save();
          ctx.scale(-1, 1);
          ctx.translate(-c.width, 0);

          /* legs only */
          drawConnectors(ctx, lm, LEG_CONNECTIONS, {
            color: "#00FFAA",
            lineWidth: 4,
          });
          drawLandmarks(
            ctx,
            LEG_LANDMARKS.map((i) => lm[i]),
            {
              color: "#FF0077",
              fillColor: "#FF0077",
              radius: 6,
            }
          );

          /* guide */
          if (this.guide) {
            ctx.strokeStyle = "#00FF00";
            ctx.lineWidth = 6;
            ctx.beginPath();
            ctx.moveTo(this.guide.k.x * c.width, this.guide.k.y * c.height);
            ctx.lineTo(this.guide.a.x * c.width, this.guide.a.y * c.height);
            ctx.stroke();
          }

          ctx.restore();
        }

        /* ---------------- HUD update ---------------- */
        updateHUD(a = null) {
          document.getElementById("squatCount").textContent = this.squatCount;
          document.getElementById(
            "counterDisplay"
          ).textContent = `Squats: ${this.squatCount}`;
          document.getElementById("state").textContent = this.squatPos;

          if (a) {
            document.getElementById(
              "angleDisplay"
            ).textContent = `Angle: ${Math.round(a.angle)}¬∞`;
            document.getElementById("kneeAngle").textContent = `${Math.round(
              a.angle
            )}¬∞`;
          }
        }
      }

      /* ----------- Life-cycle boot ----------- */
      window.addEventListener("load", () => new AdvancedSquatTracker());

      function playAgain() {
        document.getElementById("winScreen").style.display = "none";
        location.reload();
      }

      function nextLevel() {
        document.getElementById("winScreen").style.display = "none";
      }
    </script>
  </body>
</html>